

## 2-way ANOVAs with Fisher LSD posthoc
## Add 95% confidence intervals for coefficients of age, geno and age x geno interaction
## Add significance test for Cohen's d (treatment effect size) in young vs old mice

ulimit -s 16384
export R_MAX_VSIZE=100000000000
R --max-ppsize 500000
rm(list=ls())

setwd("/Users/danehninger/Documents/Aging_projects/Little mice_Ghrh/GMC results/Ghrhr_raw_data/AllRawFiles_forMerge/Statistical_analysis")

library(effsize) # for calculation of cohen's d effect sizes
library(Rmisc) # for calculation of confidence intervals
library(agricolae) # for Fisher LSD posthoc test

df <- read.csv2('All parameters_merged_v5_2-wayANOVA_parametric.csv')
df_stats <- data.frame()
df_processed <- data.frame()

colIndex <- 9
rowIndex <- 0
cn <- colnames(df)

for(i in 10:ncol(df)) {
      # loop through columns 10-end, i.e. all columns with phenotype data
      colIndex <- colIndex + 1
      rowIndex <- rowIndex + 1
      colN <- cn[colIndex]
      print(rowIndex)
      print(colN)
      df[, colN] <- as.numeric(as.character(df[, colN]))
      cc <- complete.cases(df[, colN])
      df_temp <- df[cc, ]
      youngControl <- df_temp[df_temp$genotype == 'control' & df_temp$age == 'young', ]
      mean_youngControl <- mean(youngControl[, colN])
      ci_youngControl <- CI(youngControl[, colN], ci=0.95)
      sd_youngControl <- sd(youngControl[, colN])
      n_youngControl <- length(youngControl[, colN])

      youngMutant <- df_temp[df_temp$genotype == 'mutant' & df_temp$age == 'young', ]
      mean_youngMutant <- mean(youngMutant[, colN])
      ci_youngMutant <- CI(youngMutant[, colN], ci=0.95)
      sd_youngMutant <- sd(youngMutant[, colN])
      n_youngMutant <- length(youngMutant[, colN])

      oldControl <- df_temp[df_temp$genotype == 'control' & df_temp$age == 'old', ]
      mean_oldControl <- mean(oldControl[, colN])
      ci_oldControl <- CI(oldControl[, colN], ci=0.95)
      sd_oldControl <- sd(oldControl[, colN])
      n_oldControl <- length(oldControl[, colN])

      oldMutant <- df_temp[df_temp$genotype == 'mutant' & df_temp$age == 'old', ]
      mean_oldMutant <- mean(oldMutant[, colN])
      ci_oldMutant <- CI(oldMutant[, colN], ci=0.95)
      sd_oldMutant <- sd(oldMutant[, colN])
      n_oldMutant <- length(oldMutant[, colN])

      # set reference level such that a negative coefficient for genotype means reduction in the mutants
      # and a negative coefficient for age means reductions in old
      df_temp$genotype <- factor(df_temp$genotype, levels = c('mutant', 'control'))
      df_temp$age<- factor(df_temp$age, levels = c('old', 'young'))

      model <- lm(df_temp[, colN] ~ genotype * age, data = df_temp)
      options(contrasts = c('contr.sum', 'contr.poly'))
      aov_colN <- aov(df_temp[, colN] ~ genotype * age, data = df_temp)
      p_geno <- summary(aov_colN)[[1]][[1,"Pr(>F)"]]
      p_age <- summary(aov_colN)[[1]][[2,"Pr(>F)"]]
      p_genoXage <- summary(aov_colN)[[1]][[3,"Pr(>F)"]]

      ci_geno_upper <- confint(aov_colN)[[6]]
      ci_geno_lower <- confint(aov_colN)[[2]]
      ci_age_upper <- confint(aov_colN)[[7]]
      ci_age_lower <- confint(aov_colN)[[3]]
      ci_genoXage_upper <- confint(aov_colN)[[8]]
      ci_genoXage_lower <- confint(aov_colN)[[4]]

      df_stats[rowIndex, 1] <- colN
      df_stats[rowIndex, 2] <- mean_youngControl
      df_stats[rowIndex, 3] <- ci_youngControl[1]
      df_stats[rowIndex, 4] <- ci_youngControl[2]
      df_stats[rowIndex, 5] <- ci_youngControl[3]
      df_stats[rowIndex, 6] <- sd_youngControl
      df_stats[rowIndex, 7] <- n_youngControl

      df_stats[rowIndex, 8] <- mean_youngMutant
      df_stats[rowIndex, 9] <- ci_youngMutant[1]
      df_stats[rowIndex, 10] <- ci_youngMutant[2]
      df_stats[rowIndex, 11] <- ci_youngMutant[3]
      df_stats[rowIndex, 12] <- sd_youngMutant
      df_stats[rowIndex, 13] <- n_youngMutant

      df_stats[rowIndex, 14] <- mean_oldControl
      df_stats[rowIndex, 15] <- ci_oldControl[1]
      df_stats[rowIndex, 16] <- ci_oldControl[2]
      df_stats[rowIndex, 17] <- ci_oldControl[3]
      df_stats[rowIndex, 18] <- sd_oldControl
      df_stats[rowIndex, 19] <- n_oldControl

      df_stats[rowIndex, 20] <- mean_oldMutant
      df_stats[rowIndex, 21] <- ci_oldMutant[1]
      df_stats[rowIndex, 22] <- ci_oldMutant[2]
      df_stats[rowIndex, 23] <- ci_oldMutant[3]
      df_stats[rowIndex, 24] <- sd_oldMutant
      df_stats[rowIndex, 25] <- n_oldMutant

      df_stats[rowIndex, 26] <- p_geno
      df_stats[rowIndex, 27] <- p_age
      df_stats[rowIndex, 28] <- p_genoXage

      df_stats[rowIndex, 29] <- ci_geno_upper
      df_stats[rowIndex, 30] <- ci_geno_lower
      df_stats[rowIndex, 31] <- ci_age_upper
      df_stats[rowIndex, 32] <- ci_age_lower
      df_stats[rowIndex, 33] <- ci_genoXage_upper
      df_stats[rowIndex, 34] <- ci_genoXage_lower

      posthoc_colN <- LSD.test(aov_colN, c('age', 'genotype'), group = FALSE)
      df_stats[rowIndex, 35] <- posthoc_colN$comparison['old:control - old:mutant', 'pvalue']
      df_stats[rowIndex, 36] <- posthoc_colN$comparison['old:control - young:control', 'pvalue']
      df_stats[rowIndex, 37] <- posthoc_colN$comparison['old:control - young:mutant', 'pvalue']
      df_stats[rowIndex, 38] <- posthoc_colN$comparison['old:mutant - young:control', 'pvalue']
      df_stats[rowIndex, 39] <- posthoc_colN$comparison['old:mutant - young:mutant', 'pvalue']
      df_stats[rowIndex, 40] <- posthoc_colN$comparison['young:control - young:mutant', 'pvalue']

      df_temp_young <- df_temp[df_temp$age == 'young', ]
      df_temp_old <- df_temp[df_temp$age == 'old', ]
      df_temp_control <- df_temp[df_temp$genotype == 'control', ]
      cohen.d_geno_inYoung <- cohen.d(d = df_temp_young[, colN], f = df_temp_young$genotype)
      cohen.d_geno_inOld <- cohen.d(d = df_temp_old[, colN], f = df_temp_old$genotype)
      cohen.d_age_inControl <- cohen.d(d = df_temp_control[, colN], f = df_temp_control$age)

      df_stats[rowIndex, 41] <- (cohen.d_geno_inYoung$estimate)
      df_stats[rowIndex, 42] <- (cohen.d_geno_inYoung$conf.int[[1]])
      df_stats[rowIndex, 43] <- (cohen.d_geno_inYoung$conf.int[[2]])

      df_stats[rowIndex, 44] <- (cohen.d_geno_inOld$estimate)
      df_stats[rowIndex, 45] <- (cohen.d_geno_inOld$conf.int[[1]])
      df_stats[rowIndex, 46] <- (cohen.d_geno_inOld$conf.int[[2]])

      df_stats[rowIndex, 47] <- cohen.d_age_inControl$estimate
      df_stats[rowIndex, 48] <- cohen.d_age_inControl$conf.int[[1]]
      df_stats[rowIndex, 49] <- cohen.d_age_inControl$conf.int[[2]]

      #calculate test statistic to determine if cohen.d_geno_inYoung differs significantly from cohen.d_geno_inOld
      #formula described here: https://stats.stackexchange.com/questions/77269/statistical-comparison-of-2-independent-cohens-ds
      v_geno_inOld <- 1/n_oldControl + 1/n_oldMutant + (((cohen.d_geno_inOld$estimate))^2/(2*(n_oldControl+n_oldMutant)))
      v_geno_inYoung <- 1/n_youngControl + 1/n_youngMutant + (((cohen.d_geno_inYoung$estimate))^2/(2*(n_youngControl+n_youngMutant)))
      z <- ((cohen.d_geno_inOld$estimate) - (cohen.d_geno_inYoung$estimate))/sqrt(v_geno_inOld+v_geno_inYoung)
      df_stats[rowIndex, 50] <- z
      pvalue2sided=2*pnorm(-abs(z))
      df_stats[rowIndex, 51] <- pvalue2sided
}

colnames(df_stats) <- c('phenotype', 'mean_youngContr', 'ci_youngContr_upper', 'ci_youngContr_mean', 'ci_youngContr_lower', 'sd_youngContr', 'n_youngContr', 'mean_youngMut', 'ci_youngMut_upper', 'ci_youngMut_mean', 'ci_youngMut_lower', 'sd_youngMut', 'n_youngMut', 'mean_oldContr', 'ci_oldContr_upper', 'ci_oldContr_mean', 'ci_oldContr_lower', 'sd_oldContr', 'n_oldContr', 'mean_oldMut', 'ci_oldMut_upper', 'ci_oldMut_mean', 'ci_oldMut_lower', 'sd_oldMut', 'n_oldMut', 'aov_p_geno', 'aov_p_age', 'aov_p_genoXage', 'ci_geno_upper', 'ci_geno_lower', 'ci_age_upper', 'ci_age_lower', 'ci_genoXage_upper', 'ci_genoXage_lower',  'post_oldMut_oldContr', 'post_youngContr_oldContr', 'post_youngMut_oldContr', 'post_youngContr_oldMut', 'post_youngMut_oldMut', 'post_youngMut_youngContr', 'cohen.d_genotype_inYoung', 'ci_cohen.d_genotype_inYoung_lower', 'ci_cohen.d_genotype_inYoung_upper', 'cohen.d_genotype_inOld', 'ci_cohen.d_genotype_inOld_lower', 'ci_cohen.d_genotype_inOld_upper', 'cohen.d_age_inControl', 'ci_cohen.d_age_inControl_lower', 'ci_cohen.d_age_inControl_upper', 'z_stat_cohen.d_genotype_inOld_vs_cohen.d_genotype_inYoung', 'p_cohen.d_genotype_inOld_vs_cohen.d_genotype_inYoung')

write.csv(df_stats, file = 'Statistics_2-wayANOVAs_FisherLSD_ghrhr_allParameters_withZstatForCohenDcomparison_withCIforCoeff.csv')




_____________________________________

## for analysis of non-parametric data; use aligned rank transform
## add significance test for Cohen's d (treatment effect size) in young vs old mice

ulimit -s 16384
export R_MAX_VSIZE=100000000000
R --max-ppsize 500000
rm(list=ls())

setwd("/Users/danehninger/Documents/Aging_projects/Little mice_Ghrh/GMC results/Ghrhr_raw_data/AllRawFiles_forMerge/Statistical_analysis")

library(effsize) # for calculation of cohen's d effect sizes
library(Rmisc) # for calculation of confidence intervals
library(ARTool) # for ART

df <- read.csv2('All parameters_merged_v5_ART_non-parametric.csv')
df_stats <- data.frame()

colIndex <- 9
rowIndex <- 0
cn <- colnames(df)

for(i in 10:ncol(df)) {
      # loop through columns 10-end, i.e. all columns with phenotype data
      colIndex <- colIndex + 1
      rowIndex <- rowIndex + 1
      colN <- cn[colIndex]
      print(rowIndex)
      print(colN)
      df[, colN] <- as.numeric(as.character(df[, colN]))
      cc <- complete.cases(df[, colN])
      df_temp <- df[cc, ]
      youngControl <- df_temp[df_temp$genotype == 'control' & df_temp$age == 'young', ]
      mean_youngControl <- mean(youngControl[, colN])
      ci_youngControl <- CI(youngControl[, colN], ci=0.95)
      sd_youngControl <- sd(youngControl[, colN])
      n_youngControl <- length(youngControl[, colN])

      youngMutant <- df_temp[df_temp$genotype == 'mutant' & df_temp$age == 'young', ]
      mean_youngMutant <- mean(youngMutant[, colN])
      ci_youngMutant <- CI(youngMutant[, colN], ci=0.95)
      sd_youngMutant <- sd(youngMutant[, colN])
      n_youngMutant <- length(youngMutant[, colN])

      oldControl <- df_temp[df_temp$genotype == 'control' & df_temp$age == 'old', ]
      mean_oldControl <- mean(oldControl[, colN])
      ci_oldControl <- CI(oldControl[, colN], ci=0.95)
      sd_oldControl <- sd(oldControl[, colN])
      n_oldControl <- length(oldControl[, colN])

      oldMutant <- df_temp[df_temp$genotype == 'mutant' & df_temp$age == 'old', ]
      mean_oldMutant <- mean(oldMutant[, colN])
      ci_oldMutant <- CI(oldMutant[, colN], ci=0.95)
      sd_oldMutant <- sd(oldMutant[, colN])
      n_oldMutant <- length(oldMutant[, colN])

      # set reference level such that a negative coefficient for genotype means reduction in the mutants
      # and a negative coefficient for age means reductions in old
      df_temp$genotype <- factor(df_temp$genotype, levels = c('mutant', 'control'))
      df_temp$age<- factor(df_temp$age, levels = c('old', 'young'))

      m = art(df_temp[, colN] ~ genotype * age, data = df_temp)
      np_anova <- anova(m)
      p_geno <- np_anova$'Pr(>F)'[1]
      p_age <- np_anova$'Pr(>F)'[2]
      p_genoXage <- np_anova$'Pr(>F)'[3]

      df_stats[rowIndex, 1] <- colN
      df_stats[rowIndex, 2] <- mean_youngControl
      df_stats[rowIndex, 3] <- ci_youngControl[1]
      df_stats[rowIndex, 4] <- ci_youngControl[2]
      df_stats[rowIndex, 5] <- ci_youngControl[3]
      df_stats[rowIndex, 6] <- sd_youngControl
      df_stats[rowIndex, 7] <- n_youngControl

      df_stats[rowIndex, 8] <- mean_youngMutant
      df_stats[rowIndex, 9] <- ci_youngMutant[1]
      df_stats[rowIndex, 10] <- ci_youngMutant[2]
      df_stats[rowIndex, 11] <- ci_youngMutant[3]
      df_stats[rowIndex, 12] <- sd_youngMutant
      df_stats[rowIndex, 13] <- n_youngMutant

      df_stats[rowIndex, 14] <- mean_oldControl
      df_stats[rowIndex, 15] <- ci_oldControl[1]
      df_stats[rowIndex, 16] <- ci_oldControl[2]
      df_stats[rowIndex, 17] <- ci_oldControl[3]
      df_stats[rowIndex, 18] <- sd_oldControl
      df_stats[rowIndex, 19] <- n_oldControl

      df_stats[rowIndex, 20] <- mean_oldMutant
      df_stats[rowIndex, 21] <- ci_oldMutant[1]
      df_stats[rowIndex, 22] <- ci_oldMutant[2]
      df_stats[rowIndex, 23] <- ci_oldMutant[3]
      df_stats[rowIndex, 24] <- sd_oldMutant
      df_stats[rowIndex, 25] <- n_oldMutant

      df_stats[rowIndex, 26] <- p_geno
      df_stats[rowIndex, 27] <- p_age
      df_stats[rowIndex, 28] <- p_genoXage

      ##posthoc with Mann-Whitney U tests
      posthoc_mutOld_vs_contrOld = wilcox.test(oldMutant[, colN], oldControl[, colN])$p.value
      posthoc_contrYoung_vs_contrOld = wilcox.test(youngControl[, colN], oldControl[, colN])$p.value
      posthoc_mutYoung_vs_contrOld = wilcox.test(youngMutant[, colN], oldControl[, colN])$p.value
      posthoc_contrYoung_vs_mutOld = wilcox.test(youngControl[, colN], oldMutant[, colN])$p.value
      posthoc_mutYoung_vs_mutOld = wilcox.test(youngMutant[, colN], oldMutant[, colN])$p.value
      posthoc_mutYoung_vs_contrYoung = wilcox.test(youngMutant[, colN], youngControl[, colN])$p.value

      df_stats[rowIndex, 29] <- posthoc_mutOld_vs_contrOld
      df_stats[rowIndex, 30] <- posthoc_contrYoung_vs_contrOld
      df_stats[rowIndex, 31] <- posthoc_mutYoung_vs_contrOld
      df_stats[rowIndex, 32] <- posthoc_contrYoung_vs_mutOld
      df_stats[rowIndex, 33] <- posthoc_mutYoung_vs_mutOld
      df_stats[rowIndex, 34] <- posthoc_mutYoung_vs_contrYoung

      df_temp_young <- df_temp[df_temp$age == 'young', ]
      df_temp_old <- df_temp[df_temp$age == 'old', ]
      df_temp_control <- df_temp[df_temp$genotype == 'control', ]
      cohen.d_geno_inYoung <- cohen.d(d = df_temp_young[, colN], f = df_temp_young$genotype)
      cohen.d_geno_inOld <- cohen.d(d = df_temp_old[, colN], f = df_temp_old$genotype)
      cohen.d_age_inControl <- cohen.d(d = df_temp_control[, colN], f = df_temp_control$age)

      df_stats[rowIndex, 35] <- (cohen.d_geno_inYoung$estimate)
      df_stats[rowIndex, 36] <- (cohen.d_geno_inYoung$conf.int[[2]])
      df_stats[rowIndex, 37] <- (cohen.d_geno_inYoung$conf.int[[1]])

      df_stats[rowIndex, 38] <- (cohen.d_geno_inOld$estimate)
      df_stats[rowIndex, 39] <- (cohen.d_geno_inOld$conf.int[[2]])
      df_stats[rowIndex, 40] <- (cohen.d_geno_inOld$conf.int[[1]])

      df_stats[rowIndex, 41] <- cohen.d_age_inControl$estimate
      df_stats[rowIndex, 42] <- cohen.d_age_inControl$conf.int[[1]]
      df_stats[rowIndex, 43] <- cohen.d_age_inControl$conf.int[[2]]

      #calculate test statistic to determine if cohen.d_geno_inYoung differs significantly from cohen.d_geno_inOld
      #formula described here: https://stats.stackexchange.com/questions/77269/statistical-comparison-of-2-independent-cohens-ds
      v_geno_inOld <- 1/n_oldControl + 1/n_oldMutant + (((cohen.d_geno_inOld$estimate)*(-1))^2/(2*(n_oldControl+n_oldMutant)))
      v_geno_inYoung <- 1/n_youngControl + 1/n_youngMutant + (((cohen.d_geno_inYoung$estimate)*(-1))^2/(2*(n_youngControl+n_youngMutant)))
      z <- ((cohen.d_geno_inOld$estimate*(-1)) - (cohen.d_geno_inYoung$estimate*(-1)))/sqrt(v_geno_inOld+v_geno_inYoung)
      df_stats[rowIndex, 44] <- z
      pvalue2sided=2*pnorm(-abs(z))
      df_stats[rowIndex, 45] <- pvalue2sided
}

colnames(df_stats) <- c('phenotype', 'mean_youngContr', 'ci_youngContr_upper', 'ci_youngContr_mean', 'ci_youngContr_lower', 'sd_youngContr', 'n_youngContr', 'mean_youngMut', 'ci_youngMut_upper', 'ci_youngMut_mean', 'ci_youngMut_lower', 'sd_youngMut', 'n_youngMut', 'mean_oldContr', 'ci_oldContr_upper', 'ci_oldContr_mean', 'ci_oldContr_lower', 'sd_oldContr', 'n_oldContr', 'mean_oldMut', 'ci_oldMut_upper', 'ci_oldMut_mean', 'ci_oldMut_lower', 'sd_oldMut', 'n_oldMut', 'art_p_geno', 'art_p_age', 'art_p_genoXage', 'post_mutOld_contrOld', 'post_contrYoung_contrOld', 'post_mutYoung_contrOld', 'post_contrYoung_mutOld', 'post_mutYoung_mutOld', 'post_mutYoung_contrYoung', 'cohen.d_genotype_inYoung', 'ci_cohen.d_genotype_inYoung_lower', 'ci_cohen.d_genotype_inYoung_upper', 'cohen.d_genotype_inOld', 'ci_cohen.d_genotype_inOld_lower', 'ci_cohen.d_genotype_inOld_upper', 'cohen.d_age_inControl', 'ci_cohen.d_age_inControl_lower', 'ci_cohen.d_age_inControl_upper', 'z_stat_cohen.d_genotype_inOld_vs_cohen.d_genotype_inYoung', 'p_cohen.d_genotype_inOld_vs_cohen.d_genotype_inYoung')

write.csv(df_stats, file = 'Statistics_all_ghrhr_non-parametric_ART_withZstatForCohenDcomparison_withCIforCoeff.csv')






_____________________________________

## for analysis of non-parametric data; use aligned rank transform
## add significance test for Cohen's d (treatment effect size) in young vs old mice


## in terminal:
ulimit -s 16384
export R_MAX_VSIZE=100000000000
R --max-ppsize 500000
rm(list=ls())

setwd("/Users/danehninger/Documents/Aging_projects/Little mice_Ghrh/GMC results/Ghrhr_raw_data/AllRawFiles_forMerge/Statistical_analysis")

library(effsize) # for calculation of cohen's d effect sizes
library(Rmisc) # for calculation of confidence intervals
library(ARTool) # for ART

df <- read.csv2('All parameters_merged_v5_ART_non-parametric.csv')
df_stats <- data.frame()

colIndex <- 9
rowIndex <- 0
cn <- colnames(df)

for(i in 10:ncol(df)) {
      # loop through columns 10-end, i.e. all columns with phenotype data
      colIndex <- colIndex + 1
      rowIndex <- rowIndex + 1
      colN <- cn[colIndex]
      print(rowIndex)
      print(colN)
      df[, colN] <- as.numeric(as.character(df[, colN]))
      cc <- complete.cases(df[, colN])
      df_temp <- df[cc, ]
      youngControl <- df_temp[df_temp$genotype == 'control' & df_temp$age == 'young', ]
      mean_youngControl <- mean(youngControl[, colN])
      ci_youngControl <- CI(youngControl[, colN], ci=0.95)
      sd_youngControl <- sd(youngControl[, colN])
      n_youngControl <- length(youngControl[, colN])

      youngMutant <- df_temp[df_temp$genotype == 'mutant' & df_temp$age == 'young', ]
      mean_youngMutant <- mean(youngMutant[, colN])
      ci_youngMutant <- CI(youngMutant[, colN], ci=0.95)
      sd_youngMutant <- sd(youngMutant[, colN])
      n_youngMutant <- length(youngMutant[, colN])

      oldControl <- df_temp[df_temp$genotype == 'control' & df_temp$age == 'old', ]
      mean_oldControl <- mean(oldControl[, colN])
      ci_oldControl <- CI(oldControl[, colN], ci=0.95)
      sd_oldControl <- sd(oldControl[, colN])
      n_oldControl <- length(oldControl[, colN])

      oldMutant <- df_temp[df_temp$genotype == 'mutant' & df_temp$age == 'old', ]
      mean_oldMutant <- mean(oldMutant[, colN])
      ci_oldMutant <- CI(oldMutant[, colN], ci=0.95)
      sd_oldMutant <- sd(oldMutant[, colN])
      n_oldMutant <- length(oldMutant[, colN])

      # set reference level such that a negative coefficient for genotype means reduction in the mutants
      # and a negative coefficient for age means reductions in old
      df_temp$genotype <- factor(df_temp$genotype, levels = c('mutant', 'control'))
      df_temp$age<- factor(df_temp$age, levels = c('old', 'young'))

      m = art(df_temp[, colN] ~ genotype * age, data = df_temp) # uses a linear mixed model
      np_anova <- anova(m)
      p_geno <- np_anova$'Pr(>F)'[1]
      p_age <- np_anova$'Pr(>F)'[2]
      p_genoXage <- np_anova$'Pr(>F)'[3]

      df_stats[rowIndex, 1] <- colN
      df_stats[rowIndex, 2] <- mean_youngControl
      df_stats[rowIndex, 3] <- ci_youngControl[1]
      df_stats[rowIndex, 4] <- ci_youngControl[2]
      df_stats[rowIndex, 5] <- ci_youngControl[3]
      df_stats[rowIndex, 6] <- sd_youngControl
      df_stats[rowIndex, 7] <- n_youngControl

      df_stats[rowIndex, 8] <- mean_youngMutant
      df_stats[rowIndex, 9] <- ci_youngMutant[1]
      df_stats[rowIndex, 10] <- ci_youngMutant[2]
      df_stats[rowIndex, 11] <- ci_youngMutant[3]
      df_stats[rowIndex, 12] <- sd_youngMutant
      df_stats[rowIndex, 13] <- n_youngMutant

      df_stats[rowIndex, 14] <- mean_oldControl
      df_stats[rowIndex, 15] <- ci_oldControl[1]
      df_stats[rowIndex, 16] <- ci_oldControl[2]
      df_stats[rowIndex, 17] <- ci_oldControl[3]
      df_stats[rowIndex, 18] <- sd_oldControl
      df_stats[rowIndex, 19] <- n_oldControl

      df_stats[rowIndex, 20] <- mean_oldMutant
      df_stats[rowIndex, 21] <- ci_oldMutant[1]
      df_stats[rowIndex, 22] <- ci_oldMutant[2]
      df_stats[rowIndex, 23] <- ci_oldMutant[3]
      df_stats[rowIndex, 24] <- sd_oldMutant
      df_stats[rowIndex, 25] <- n_oldMutant

      df_stats[rowIndex, 26] <- p_geno
      df_stats[rowIndex, 27] <- p_age
      df_stats[rowIndex, 28] <- p_genoXage

      ##posthoc with Mann-Whitney U tests
      posthoc_mutOld_vs_contrOld = wilcox.test(oldMutant[, colN], oldControl[, colN])$p.value
      posthoc_contrYoung_vs_contrOld = wilcox.test(youngControl[, colN], oldControl[, colN])$p.value
      posthoc_mutYoung_vs_contrOld = wilcox.test(youngMutant[, colN], oldControl[, colN])$p.value
      posthoc_contrYoung_vs_mutOld = wilcox.test(youngControl[, colN], oldMutant[, colN])$p.value
      posthoc_mutYoung_vs_mutOld = wilcox.test(youngMutant[, colN], oldMutant[, colN])$p.value
      posthoc_mutYoung_vs_contrYoung = wilcox.test(youngMutant[, colN], youngControl[, colN])$p.value

      df_stats[rowIndex, 29] <- posthoc_mutOld_vs_contrOld
      df_stats[rowIndex, 30] <- posthoc_contrYoung_vs_contrOld
      df_stats[rowIndex, 31] <- posthoc_mutYoung_vs_contrOld
      df_stats[rowIndex, 32] <- posthoc_contrYoung_vs_mutOld
      df_stats[rowIndex, 33] <- posthoc_mutYoung_vs_mutOld
      df_stats[rowIndex, 34] <- posthoc_mutYoung_vs_contrYoung

      df_temp_young <- df_temp[df_temp$age == 'young', ]
      df_temp_old <- df_temp[df_temp$age == 'old', ]
      df_temp_control <- df_temp[df_temp$genotype == 'control', ]
      cohen.d_geno_inYoung <- cohen.d(d = df_temp_young[, colN], f = df_temp_young$genotype)
      cohen.d_geno_inOld <- cohen.d(d = df_temp_old[, colN], f = df_temp_old$genotype)
      cohen.d_age_inControl <- cohen.d(d = df_temp_control[, colN], f = df_temp_control$age)

      df_stats[rowIndex, 35] <- (cohen.d_geno_inYoung$estimate)
      df_stats[rowIndex, 36] <- (cohen.d_geno_inYoung$conf.int[[2]])
      df_stats[rowIndex, 37] <- (cohen.d_geno_inYoung$conf.int[[1]])

      df_stats[rowIndex, 38] <- (cohen.d_geno_inOld$estimate)
      df_stats[rowIndex, 39] <- (cohen.d_geno_inOld$conf.int[[2]])
      df_stats[rowIndex, 40] <- (cohen.d_geno_inOld$conf.int[[1]])

      df_stats[rowIndex, 41] <- cohen.d_age_inControl$estimate
      df_stats[rowIndex, 42] <- cohen.d_age_inControl$conf.int[[1]]
      df_stats[rowIndex, 43] <- cohen.d_age_inControl$conf.int[[2]]

      #calculate test statistic to determine if cohen.d_geno_inYoung differs significantly from cohen.d_geno_inOld
      #formula described here: https://stats.stackexchange.com/questions/77269/statistical-comparison-of-2-independent-cohens-ds
      v_geno_inOld <- 1/n_oldControl + 1/n_oldMutant + (((cohen.d_geno_inOld$estimate)*(-1))^2/(2*(n_oldControl+n_oldMutant)))
      v_geno_inYoung <- 1/n_youngControl + 1/n_youngMutant + (((cohen.d_geno_inYoung$estimate)*(-1))^2/(2*(n_youngControl+n_youngMutant)))
      z <- ((cohen.d_geno_inOld$estimate*(-1)) - (cohen.d_geno_inYoung$estimate*(-1)))/sqrt(v_geno_inOld+v_geno_inYoung)
      df_stats[rowIndex, 44] <- z
      pvalue2sided=2*pnorm(-abs(z))
      df_stats[rowIndex, 45] <- pvalue2sided
}

colnames(df_stats) <- c('phenotype', 'mean_youngContr', 'ci_youngContr_upper', 'ci_youngContr_mean', 'ci_youngContr_lower', 'sd_youngContr', 'n_youngContr', 'mean_youngMut', 'ci_youngMut_upper', 'ci_youngMut_mean', 'ci_youngMut_lower', 'sd_youngMut', 'n_youngMut', 'mean_oldContr', 'ci_oldContr_upper', 'ci_oldContr_mean', 'ci_oldContr_lower', 'sd_oldContr', 'n_oldContr', 'mean_oldMut', 'ci_oldMut_upper', 'ci_oldMut_mean', 'ci_oldMut_lower', 'sd_oldMut', 'n_oldMut', 'art_p_geno', 'art_p_age', 'art_p_genoXage', 'ci_geno_upper', 'ci_geno_lower', 'ci_age_upper', 'ci_age_lower', 'ci_genoXage_upper', 'ci_genoXage_lower', 'post_mutOld_contrOld', 'post_contrYoung_contrOld', 'post_mutYoung_contrOld', 'post_contrYoung_mutOld', 'post_mutYoung_mutOld', 'post_mutYoung_contrYoung', 'cohen.d_genotype_inYoung', 'ci_cohen.d_genotype_inYoung_lower', 'ci_cohen.d_genotype_inYoung_upper', 'cohen.d_genotype_inOld', 'ci_cohen.d_genotype_inOld_lower', 'ci_cohen.d_genotype_inOld_upper', 'cohen.d_age_inControl', 'ci_cohen.d_age_inControl_lower', 'ci_cohen.d_age_inControl_upper', 'z_stat_cohen.d_genotype_inOld_vs_cohen.d_genotype_inYoung', 'p_cohen.d_genotype_inOld_vs_cohen.d_genotype_inYoung')

write.csv(df_stats, file = 'Statistics_all_ghrhr_non-parametric_ART_withZstatForCohenDcomparison_withCIforCoeff.csv')





________________________________________________________

# PCA of continuous phenotypic variables
# impute missing values using R package 'mice'
# imputation is done group by group

ulimit -s 16384
export R_MAX_VSIZE=100000000000
R --max-ppsize 500000
rm(list=ls())

setwd("/Users/danehninger/Documents/Aging_projects/Little mice_Ghrh/GMC results/Ghrhr_raw_data/AllRawFiles_forMerge/Statistical_analysis")

library(FactoMineR) # for PCA
library(factoextra) # for PCA
library(plyr) # for revalue
library(mice) # for imputation
library(ggplot2)

set.seed(12)

df <- read.csv2('All parameters_merged_v5_forPCA_onlyContinVar.csv')
df$group <- revalue(df$group, c('young_control' = 'Young WT', 'young_mutant' = 'Young Ghrhr mutant', 'old_control' = 'Old WT', 'old_mutant' = 'Old Ghrhr mutant'))
df$group <- factor(df$group, levels = c('Young WT', 'Young Ghrhr mutant', 'Old WT', 'Old Ghrhr mutant'))

for(i in 2:ncol(df)) {
      df[, i] <- as.numeric(as.character(df[, i]))
}

groups <- c('Young WT', 'Young Ghrhr mutant', 'Old WT', 'Old Ghrhr mutant')
c <- c(1,2,3,4)

for (i in c){
      if (i== 1){
            df_mice <- df[df$group == groups[i],]
            mice_imputes <- mice(df_mice, method='cart', m=1, threshold=1.2)
      } else {
            df_mice_temp <- df[df$group == groups[i],]
            mice_imputes_temp <- mice(df_mice_temp, method='cart', m=1, threshold=1.2)
            mice_imputes <- rbind(mice_imputes, mice_imputes_temp)
      }
}


Imputed_data=complete(mice_imputes)
write.csv(Imputed_data, file = 'All parameters_merged_v5_forPCA_onlyContinVar_imputedWithMice_groupWise.csv')

##start here to re-run analysis:
#Imputed_data <- read.csv2('All parameters_merged_v5_forPCA_onlyContinVar_imputedWithMice_groupWise.csv')
#Imputed_data$group <- factor(Imputed_data$group, levels = c('Young WT', 'Young Ghrhr mutant', 'Old WT', 'Old Ghrhr mutant'))

#for(i in 2:ncol(Imputed_data)) {
#      Imputed_data[, i] <- as.numeric(as.character(Imputed_data[, i]))
#}

pca_obj <- PCA(Imputed_data[,2:ncol(Imputed_data)], ncp=20, scale.unit=TRUE)

my_colors <- c('#999999', '#0099FF', '#000000', '#0033FF' )

#visualize individual animals on PCA plane with group assignments
f <- fviz_pca_ind(pca_obj, geom = 'point', pointsize = 3, pointshape = 16, alpha = 0.6, axes = c(1,2), habillage = Imputed_data$group, addEllipses = TRUE) +
        scale_color_manual(values = my_colors) +
        scale_fill_manual(values = my_colors) +
        theme_classic()

ggsave(filename = 'PCA_phenotypes_little_revisedColors_ImputWithMice_GroupWise.svg', device = 'svg')




________________________________________________________

## Use intraclass correlation (look at ICC1, intraclass correlation, R psych package)
## to compare cohen's d values of genotype effects in young vs. old
## http://www.personality-project.org/r/html/ICC.html

ulimit -s 16384
export R_MAX_VSIZE=100000000000
R --max-ppsize 500000
rm(list=ls())

library(psych) # for intraclass correlation

setwd("/Users/danehninger/Documents/Aging_projects/Little mice_Ghrh/GMC results/Ghrhr_raw_data/AllRawFiles_forMerge/Statistical_analysis")

df <- read.csv2('Statistics_2-wayANOVAs_FisherLSD_ART_nonparam_ghrhr_allParameters_withZstatForCohenDcomparison_withCIforCoeff_onlyTumorFreeMice.csv')

df$cohen.d_age_inControl <- as.numeric(as.character(df$cohen.d_age_inControl))
df$cohen.d_genotype_inOld <- as.numeric(as.character(df$cohen.d_genotype_inOld))
df$cohen.d_genotype_inYoung <- as.numeric(as.character(df$cohen.d_genotype_inYoung))
df$aov_p_geno <- as.numeric(as.character(df$aov_p_geno))
df$aov_p_age <- as.numeric(as.character(df$aov_p_age))
df$aov_p_genoXage <- as.numeric(as.character(df$aov_p_genoXage))


#all: include all phenotypes that are either (age-sensitive AND (geno-sensitive OR affected by age x geno interaction)) OR (not age-sensitive but geno-sensitive)
df_all <- subset(df, (((aov_p_age < 0.05) & ((aov_p_geno < 0.05) | (aov_p_genoXage < 0.05))) | ((aov_p_age > 0.05) & ((aov_p_geno < 0.05) | (aov_p_genoXage < 0.05)))))
write.csv(df_all, file='parameters_allSets_onlyTumorFreeMice.csv')
df_all_cohen = df_all[, c('cohen.d_genotype_inYoung', 'cohen.d_genotype_inOld')]
#intraclass correlation, psych package
#all phenotypes (all as defined above)
icc = ICC(df_all_cohen)
all_icc1_ICC1 = icc$results$ICC[1]
all_icc1_ICC1_upper = icc$results[,'upper bound'][1]
all_icc1_ICC1_lower = icc$results[,'lower bound'][1]
all_icc1_ICC1_p = icc$results$p[1]
cor = cor.test(x=df_all_cohen$cohen.d_genotype_inYoung, y=df_all_cohen$cohen.d_genotype_inOld, method='pearson')

#age- and geno-sensitive, effects in opposite direction (anti-aging)
df_antiage <- subset(df, ((aov_p_age < 0.05) & ((aov_p_geno < 0.05) | (aov_p_genoXage < 0.05)) & ((cohen.d_age_inControl * cohen.d_genotype_inOld) < 0)))
write.csv(df_antiage, file='parameters_antiage_onlyTumorFreeMice.csv')
df_antiage_cohen = df_antiage[, c('cohen.d_genotype_inYoung', 'cohen.d_genotype_inOld')]
#all anti-age phenotypes (as defined above)
icc = ICC(df_antiage_cohen)
antiage_icc1_ICC1 = icc$results$ICC[1]
antiage_icc1_ICC1_upper = icc$results[,'upper bound'][1]
antiage_icc1_ICC1_lower = icc$results[,'lower bound'][1]
antiage_icc1_ICC1_p = icc$results$p[1]
cor = cor.test(x=df_antiage_cohen$cohen.d_genotype_inYoung, y=df_antiage_cohen$cohen.d_genotype_inOld, method='pearson')

#age- and geno-sensitive, effects in same direction (pro-aging)
df_proage <- subset(df, ((aov_p_age < 0.05) & ((aov_p_geno < 0.05) | (aov_p_genoXage < 0.05)) & ((cohen.d_age_inControl * cohen.d_genotype_inOld) > 0)))
write.csv(df_proage, file='parameters_proage_onlyTumorFreeMice.csv')
df_proage_cohen = df_proage[, c('cohen.d_genotype_inYoung', 'cohen.d_genotype_inOld')]
#all pro-age phenotypes (as defined above)
icc = ICC(df_proage_cohen)
proage_icc1_ICC1 = icc$results$ICC[1]
proage_icc1_ICC1_upper = icc$results[,'upper bound'][1]
proage_icc1_ICC1_lower = icc$results[,'lower bound'][1]
proage_icc1_ICC1_p = icc$results$p[1]
cor = cor.test(x=df_proage_cohen$cohen.d_genotype_inYoung, y=df_proage_cohen$cohen.d_genotype_inOld, method='pearson')


#geno-sensitive but not age-sensitive
df_geno <- subset(df, ((aov_p_age > 0.05) & ((aov_p_geno < 0.05) | (aov_p_genoXage < 0.05))))
write.csv(df_geno, file='parameters_geno_onlyTumorFreeMice.csv')
df_geno_cohen = df_geno[, c('cohen.d_genotype_inYoung', 'cohen.d_genotype_inOld')]
#all geno phenotypes (as defined above)
icc = ICC(df_geno_cohen)
geno_icc1_ICC1 = icc$results$ICC[1]
geno_icc1_ICC1_upper = icc$results[,'upper bound'][1]
geno_icc1_ICC1_lower = icc$results[,'lower bound'][1]
geno_icc1_ICC1_p = icc$results$p[1]
cor = cor.test(x=df_geno_cohen$cohen.d_genotype_inYoung, y=df_geno_cohen$cohen.d_genotype_inOld, method='pearson')
